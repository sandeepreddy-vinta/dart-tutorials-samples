// Auto-generated from xslambookform.html.
// DO NOT EDIT.

library x_slambook_form;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'package:web_ui/observe/observable.dart' as __observe;
import 'dart:html';
import 'dart:json' as json;
import 'package:web_ui/web_ui.dart';



class SlamBookComponent extends WebComponent with Observable  {
  /** Autogenerated from the template. */

  /** CSS class constants. */
  static Map<String, String> _css = {};

  /** This field is deprecated, use getShadowRoot instead. */
  get _root => getShadowRoot("x-slambook-form");
  static final __shadowTemplate = new autogenerated.DocumentFragment.html('''
      <div class="entry">
        <label>First name?</label>
        <input type="text">
      </div>
      <div class="entry">
        <label>Favorite quote?</label>
        <textarea></textarea>
      </div> 
      <div class="entry">
        <label>Favorite color?</label>
        <input type="color">
      </div>
      <div class="entry">
        <label>Birthday?</label>
        <input type="date">
      </div>
      <div class="entry">
        <label>Favorite volume?</label>
        <input type="range" min="0" max="11">  
      </div>
      <div class="entry">
        <label>Cat or dog?</label>
        <input name="catOrDog" type="radio" value="cat">Cat
        <input name="catOrDog" type="radio" value="dog">Dog
        <input name="catOrDog" type="radio" value="iguana">Iguana
      </div>
      <div>
        <label>Favorite type of music?</label>
        <select>
          <option>Classical</option>
          <option>Country</option>
          <option>Rock</option>
          <option>Silence</option>
        </select>
      </div>
      <div class="entry">
        <label>Check for zombies. </label>
        <input type="checkbox">
      </div>
      <div class="entry">
        <label>Favorite things?</label>
        <input type="checkbox">Kittens
        <input type="checkbox">Raindrops
        <input type="checkbox">Mittens
        <input type="checkbox">Kettles
      </div>

      <div class="submitarea">
        <input type="submit" value="Submit">
        <input type="reset" value="Clear"> <br>    
        <textarea disabled="" class="responsetext"></textarea>
      </div>
      
      <script type="application/dart" src="xslambookform.dart">
      </script>
    ''');
  autogenerated.InputElement __e1, __e10, __e11, __e12, __e13, __e14, __e15, __e16, __e3, __e4, __e5, __e6, __e7, __e8;
  autogenerated.SelectElement __e9;
  autogenerated.Template __t;
  autogenerated.TextAreaElement __e17, __e2;

  void created_autogenerated() {
    var __root = createShadowRoot("x-slambook-form");
    __t = new autogenerated.Template(__root);
    __root.nodes.add(__shadowTemplate.clone(true));
    __e1 = __root.nodes[1].nodes[3];
    __t.listen(__e1.onInput, ($event) { theData['firstName'] = __e1.value; });
    __t.oneWayBind(() => theData['firstName'], (e) { if (__e1.value != e) __e1.value = e; }, false, false);
    __e2 = __root.nodes[3].nodes[3];
    __t.listen(__e2.onInput, ($event) { theData['favoriteQuote'] = __e2.value; });
    __t.oneWayBind(() => theData['favoriteQuote'], (e) { if (__e2.value != e) __e2.value = e; }, false, false);
    __e3 = __root.nodes[5].nodes[3];
    __t.listen(__e3.onInput, ($event) { theData['favoriteColor'] = __e3.value; });
    __t.oneWayBind(() => theData['favoriteColor'], (e) { if (__e3.value != e) __e3.value = e; }, false, false);
    __e4 = __root.nodes[7].nodes[3];
    __t.listen(__e4.onInput, ($event) { theData['birthday'] = __e4.value; });
    __t.oneWayBind(() => theData['birthday'], (e) { if (__e4.value != e) __e4.value = e; }, false, false);
    __e5 = __root.nodes[9].nodes[3];
    __t.listen(__e5.onInput, ($event) { theData['volume'] = __e5.value; });
    __t.oneWayBind(() => theData['volume'], (e) { if (__e5.value != e) __e5.value = e; }, false, false);
    __e6 = __root.nodes[11].nodes[3];
    __t.listen(__e6.onChange, ($event) { theData['catOrDog'] = 'cat'; });
    __t.oneWayBind(() => theData['catOrDog'] == 'cat', (e) { if (__e6.checked != e) __e6.checked = e; }, false, false);
    __e7 = __root.nodes[11].nodes[5];
    __t.listen(__e7.onChange, ($event) { theData['catOrDog'] = 'dog'; });
    __t.oneWayBind(() => theData['catOrDog'] == 'dog', (e) { if (__e7.checked != e) __e7.checked = e; }, false, false);
    __e8 = __root.nodes[11].nodes[7];
    __t.listen(__e8.onChange, ($event) { theData['catOrDog'] = 'iguana'; });
    __t.oneWayBind(() => theData['catOrDog'] == 'iguana', (e) { if (__e8.checked != e) __e8.checked = e; }, false, false);
    __e9 = __root.nodes[13].nodes[3];
    __t.listen(__e9.onChange, ($event) { theData['music'] = __e9.selectedIndex; });
    __t.oneWayBind(() => theData['music'], (e) { if (__e9.selectedIndex != e) __e9.selectedIndex = e; }, false, false);
    __e10 = __root.nodes[15].nodes[3];
    __t.listen(__e10.onChange, ($event) { theData['zombies'] = __e10.checked; });
    __t.oneWayBind(() => theData['zombies'], (e) { if (__e10.checked != e) __e10.checked = e; }, false, false);
    __e11 = __root.nodes[17].nodes[3];
    __t.listen(__e11.onChange, ($event) { favoriteThings['kittens'] = __e11.checked; });
    __t.oneWayBind(() => favoriteThings['kittens'], (e) { if (__e11.checked != e) __e11.checked = e; }, false, false);
    __e12 = __root.nodes[17].nodes[5];
    __t.listen(__e12.onChange, ($event) { favoriteThings['raindrops'] = __e12.checked; });
    __t.oneWayBind(() => favoriteThings['raindrops'], (e) { if (__e12.checked != e) __e12.checked = e; }, false, false);
    __e13 = __root.nodes[17].nodes[7];
    __t.listen(__e13.onChange, ($event) { favoriteThings['mittens'] = __e13.checked; });
    __t.oneWayBind(() => favoriteThings['mittens'], (e) { if (__e13.checked != e) __e13.checked = e; }, false, false);
    __e14 = __root.nodes[17].nodes[9];
    __t.listen(__e14.onChange, ($event) { favoriteThings['kettles'] = __e14.checked; });
    __t.oneWayBind(() => favoriteThings['kettles'], (e) { if (__e14.checked != e) __e14.checked = e; }, false, false);
    __e15 = __root.nodes[19].nodes[1];
    __t.listen(__e15.onClick, ($event) { submitForm($event); });
    __e16 = __root.nodes[19].nodes[3];
    __t.listen(__e16.onClick, ($event) { resetForm($event); });
    __e17 = __root.nodes[19].nodes[7];
    __t.listen(__e17.onInput, ($event) { serverResponse = __e17.value; });
    __t.oneWayBind(() => serverResponse, (e) { if (__e17.value != e) __e17.value = e; }, false, false);
    __t.create();
  }

  void inserted_autogenerated() {
    __t.insert();
  }

  void removed_autogenerated() {
    __t.remove();
    __t = __e1 = __e2 = __e3 = __e4 = __e5 = __e6 = __e7 = __e8 = __e9 = __e10 = __e11 = __e12 = __e13 = __e14 = __e15 = __e16 = __e17 = null;
  }

  /** Original code from the component. */

  
  // bool map values bind-checked to checkboxes
  Map<String, bool> __$favoriteThings = toObservable({
      'kittens': true, 'raindrops': false,
      'mittens': true, 'kettles': false});
  Map<String, bool> get favoriteThings {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'favoriteThings');
    }
    return __$favoriteThings;
  }
  set favoriteThings(Map<String, bool> value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'favoriteThings',
          __$favoriteThings, value);
    }
    __$favoriteThings = value;
  }
  
  // put all of the data in a map and give initial values
  Map __$theData = toObservable({
      'firstName':      'mem',
      'favoriteQuote':  'Enjoy all your meals.',
      'favoriteColor':  '#4169E1',
      'birthday':       '1963-08-30',
      'volume':         '11', //I want this to be bound to an integer!
      'catOrDog':       'dog',
      'music':          2,
      'zombies':        true
      // add favoriteThings later...can't do it here...there is no this
    });
  Map get theData {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'theData');
    }
    return __$theData;
  }
  set theData(Map value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'theData',
          __$theData, value);
    }
    __$theData = value;
  }

  String __$serverResponse = "";
  String get serverResponse {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'serverResponse');
    }
    return __$serverResponse;
  }
  set serverResponse(String value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'serverResponse',
          __$serverResponse, value);
    }
    __$serverResponse = value;
  }
  
  void submitForm(Event e) {
    e.preventDefault(); // don't do the default submit
       
    // Setup the request
    var request = new HttpRequest();
    request.onReadyStateChange.listen((_) {
      if (request.readyState == HttpRequest.DONE &&
          request.status == 200) {
        // data saved OK.
        serverResponse = "Server Sez: " + request.responseText;
      } else if (request.readyState == HttpRequest.DONE &&
                 request.status == 0) {
        // status is 0...likely the server isn't running
        serverResponse = "No server";
      }
    });
    
    // POST the data to the server
    var url = "http://127.0.0.1:4040/slambookdata";
    request.open("POST", url);
    request.send(slambookAsJsonData());
  }
    
  void resetForm(Event e) {
    e.preventDefault(); // default behavior clears elements, but bound values don't follow
                        // so have to do this explicitly
    favoriteThings['kittens'] = false;
    favoriteThings['raindrops'] = false;
    favoriteThings['mittens'] = false;
    favoriteThings['kettles'] = false;
    
    theData['firstName'] = '';
    theData['favoriteQuote'] = '';
    theData['favoriteColor'] = '#FFFFFF';
    theData['birthday'] = '2013-01-01';
    theData['volume'] = '0';
    theData['catOrDog'] = 'cat';
    theData['music'] = 0;
    theData['zombies'] = false;
    serverResponse = "Data cleared.";
  }
  
  String slambookAsJsonData() {
    // put favoriteThings in the map...
    theData['favoriteThings'] = favoriteThings;
    return json.stringify(theData);
  }
}
//@ sourceMappingURL=xslambookform.dart.map